<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Javascript weblog 2002-2004</title>
<link rel="stylesheet" href="../default.css"/>
<link rel="stylesheet" href="../xsl/webLog.css"/>
<script language="javascript" src="../js/menu.js">/*fix*/</script>
<script language="javascript" src="mindex.js">/*fix*/</script>
<script language="javascript" src="../js/colorSyntaxJS.js">/*fix*/</script>
<script language="javascript" type="text/javascript">
window.onload=function()
{
	hiLiteJS("JS");
	hiLiteJS("JSnr",true);
}
        </script>
</head>
<body>
<table cellpadding="0" border="0"><tr><td width="100">
<div style="text-align: center">
<img src="../img/jsLogo.png"/>
</div>
<div style="font-family: Tahoma, sans-serif; font-size: 8pt; text-align: center">
            log.js</div>
</td><td style="width: 5px"> </td><td>
<h1>Javascript weblog 2002-2004</h1>
</td></tr><tr><td>
<script language="javascript">writeMenu();</script>
</td><td/><td style="border-left: 1px solid black; padding-left: 7px">
<div class="weblog">
<h2 class="title">
<a title="Link for future reference to this entry" name="Archived2004" href="#Archived2004">Archived</a>
<span class="date">
        (22 October 2005)
      </span>
</h2>
<p>The topics below have been archived. See <a href="jsLog.htm">newer stuff here</a>.</p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="moved" href="#moved">Moved</a>
<span class="date">
        (1 August 2004)
      </span>
</h2>
<p>Blogging has been moved to <a href="http://blogger.xs4all.nl/zanstra/">blogger.xs4all.nl/zanstra/</a>. It's powered by blogging-engine (notably me using third party tools, I must have gotten mad), more sophisticated than my xml/xslt/batch-file/ftp-blogging engine ;-)</p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="js_XmlHttpRequest" href="#js_XmlHttpRequest">XmlHttpRequest in Safari 1.2</a>
<span class="date">
        (23 May 2004)
      </span>
</h2>
<p>The very handy XmlHttpRequest (<a href="http://developer.apple.com/internet/webcontent/xmlhttpreq.html">Apple just released documentation</a>) object (already available on Mozilla and IE/Win) is now also available in Safari 1.2+, so it's really an accepted and usable way to get and post your data on a web-page. <a href="http://webfx.eae.net/dhtml/xmlextras/xmlextras.html">WebFX</a> might have some extra handy info on XML client-side scripting. <a href="http://jibbering.com/2002/4/httprequest.html">This Google SOAP example</a> is not really usable, because of cross-domain security.</p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="js_xpath" href="#js_xpath">client-side XPath</a>
<span class="date">
        (23 April 2004)
      </span>
</h2>
<p>
<a href="http://glazkov.com/blog/">Dimitri Glazkov</a> created a client-side javascript, so you can use <a href="http://glazkov.com/blog/archive/2004/04/06/168.aspx">XPath to query an HTML document</a>, like this (this is native in Mozilla):
    </p>
<pre class="JS">
var iterator=document.evaluate("//input[@type='text']",document,null,0,null);</pre>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="swapNode" href="#swapNode">swapNode</a>
<span class="date">
        (8 March 2004)
      </span>
</h2>
<p>
    The <a href="http://msdn.microsoft.com/workshop/author/dhtml/reference/methods/swapnode.asp">swapNode</a> method is very handy, so I created <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/">DOM Level 2</a> compliant function replacement. 
    </p>
<pre class="JS">
function DOMNode_swapNode(n1,n2)
{
  n1.parentNode.insertBefore(n2.parentNode.removeChild(n2),n1);
}</pre>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="insertAfter" href="#insertAfter">DOMNode.insertAfter</a>
<span class="date">
        (17 January 2004)
      </span>
</h2>
<p>
        This function should have been defined in DOM Level 1, since I need it very often. Couldn't find a better place to put it, since it's not really javascript.
        This function insertes the DOMNode <code>newChild</code> after the <code>refChild</code> element.
      </p>
<pre class="JS">
function DOMNode_insertAfter(newChild,refChild)
//Post condition: if childNodes[n] is refChild, than childNodes[n+1] is newChild.
{
  var parent=refChild.parentNode;
  if(parent.lastChild==refChild) return parent.appendChild(newChild);
  else return parent.insertBefore(newChild,refChild.nextSibling);
}</pre>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="view_dom_source" href="#view_dom_source">View DOM source</a>
<span class="date">
        (1 January 2004)
      </span>
</h2>
<p>
        A bookmarklet to show the HTML present in the DOM tree of your browser.
        Very handy if you use <code>document.write</code> extensive:
        <a href="javascript:var o=document.documentElement,p,w=window.open('','_blank'),d=w.document;d.write('&lt;html&gt;&lt;body&gt;&lt;pre&gt;');z('&lt;'+o.tagName);for(var i=0;p=o.attributes[i],i!=o.attributes.length;i++)if(p.specified)z(' '+p.nodeName+'=&quot;'+p.nodeValue+'&quot;');z('&gt;'+o.innerHTML+'&lt;/'+o.tagName+'&gt;');d.write('&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;');d.close();function z(s){d.write(s.replace(/&amp;/g,'&amp;amp;').replace(/&lt;/g,'&amp;lt;').replace(/&gt;/g,'&amp;gt;').replace(/&quot;/g,'&amp;quot;'));}">
<strong>view-DOM-source</strong>
</a>. Just try it on this page, and look for the menu of the coloured source code ;-)
      </p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="sort_closure" href="#sort_closure">How to handily use sort</a>
<span class="date">
        (7 October 2003)
      </span>
</h2>
<p>
        I always wondered why the <a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.3/reference/array.html#1196882">sort</a> method of an Array takes a <em>compare function</em>
        as an (optional) parameter. Why wasn't this solved in the Object-Oriented fashion
        (whats a function doing in OO land)?
      </p>
<p>
        First let me show in an example how I used the sort method at first:
      </p>
<pre class="JS">
/***The FileList implementation*********/
function FileList()
{
  this.list=new Array();
}
FileList.prototype.add=function(o)
{
  this.list.push(o);
}
FileList.prototype.sort=function()
{
  this.list.sort(File_compare);
}

/***The File implementation*********/
function File(name,size) 
{
  this.name=name;
  this.size=size;
}
function File_compare(f1,f2)
{
  if(f1.name < f2.name) return -1;
  else if(f1.name > f2.name) return 1;
  else return 0;
}

/***Use the objects*********/
var fileList=new FileList();
fileList.add( new File('index.htm',1024) );
fileList.add( new File('default.htm',384) );
fileList.sort( FileCompare );</pre>
<p>
        First I thought the usage of a function was because of the <a href="http://www.crockford.com/javascript/remedial.html">premature standardization</a> of the language. 
        The guys at Netscape (inventors of javascript) forgot, every object should implement a <code>compare</code> method (so I thought):
      </p>
<pre class="JS">
//This code is hypothetical, it doesn't work
File.prototype.compare=function(f1,f2)
{
  if(f1.name < f2.name) return -1;
  else if(f1.name > f2.name) return 1;
  else return 0;
}

fileList.sort();</pre>
<p>
        The problem is you lose flexibility. A list of files typically needs
        to be sorted on multiple properties, like name and file size. Reverse
        order sorting is also a handy option to have. And all configurable, please.
      </p>
<p>
        Then I realized, I could use nested functions (a function within a function)
        to implement this:
      </p>
<pre class="JS">
FileList.prototype.sort=function(property,descending)
//--@property;type=string@Name of the property used as sort order.
//--@descending;type=boolean@Whether to sort ascending or descending
{
  function fileCompare(f1,f2)
  {
    if(f1[property] < f2[property]) return descending?-1:1;
    else if(f1[property] > f2[property]) return descending?1:-1;
    else return 0;
  }
  this.list.sort(fileCompare);
}
fileList.sort('name',true);</pre>
<p> 
        What's happening here? The inner function (fileCompare) has access to the 
        local variables and arguments of the outer function (sort). 
        With this technique, you can "configure" a function without using global variables
        (and thats good, because you don't want an one-sort-order-for-all).
      </p>
<p>
        You can't do something like this in C though. In languages like Object Pascal (Delphi),
        Modula-2, Perl and of course Javascript you can.
        Javascript (and Perl) depends on <a href="http://www.wikipedia.org/wiki/Closure_(programming)">closure</a> for this.
        More on closure later, because this application doesn't use the power of
        closure to its full extend.
      </p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="used_scripts" href="#used_scripts">"Show used scripts"-bookmarklet</a>
<span class="date">
        (6 October 2003)
      </span>
</h2>
<p>
        Since day one of the web, I'm a <em>view-source</em> guy. Always wanting
        to know how people solved things. Nowadays, I just do view source, 
        to check if the author implemented the thing the way I thought of it when I looked at the page. And every now and then I learn something new.
      </p>
<p>
        You can imagine I was shocked, when I came up with the idea of a
        <a href="javascript:var%20i,o=document.getElementsByTagName('script');for(i=0;i!=o.length;i++)if(o[i].src)if(confirm('Open%20file%20['+o[i].src+']'))window.open(o[i].src,'_blank');void 0;">
<strong>view-included-scripts</strong>
</a> bookmarklet. Argh, it's so simple, but so very handy...
      </p>
<p>
<span class="updated">Updated:</span>This updated script <a href="javascript:var s='Pick your script: ',i,j,o=document.getElementsByTagName('script');for(i=0;i!=o.length;i++)if(o[i].src)s+='('+i+') '+/[-_a-z0-9]+\.[a-z]+$/i.exec(o[i].src)[0]+', ';j=prompt(s,'','ja');if(j!=null)if(o[j])if(o[j].src)window.open(o[j].src,'_blank');void 0;">
<strong>pick-your-script</strong>
</a> gives you just one prompt.
      </p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="kennify" href="#kennify">Kennify bookmarklet</a>
<span class="date">
        (8 September 2003)
      </span>
</h2>
<p>
        From a <a href="http://www.xs4all.nl/~jrmarks/">friend</a> I got an
        URL to <a href="http://www.namesuppressed.com/kenny/">kennify</a> text
        (confused? See some <a href="http://www.comedycentral.com/tv_shows/southpark/">South Park</a> cartoons first). 
        I was so impressed, so I made a <a href="javascript:document.getElementsByTagName('body')[0].appendChild(document.createElement('script')).setAttribute('src','http://www.xs4all.nl/~zanstra/js/kennify.js');void 0;">
<strong>bookmarklet</strong>
</a> (javascript bookmark, also called <a href="http://favelets.com/">favelet</a>), so every web-page
        can be kennified. So add the link to your favorites, and have fun.
      </p>
<p>
        Some notes. Although I rewrote
        the javascript of the Kenny Translator, I actually didn't change the algorithm; it's just less text. The bookmarklet doesn't work in the XML version of this log, 
        because it Kennifies all text-nodes in the document.body tree.
        The bookmarklet uses <a href="http://www.xs4all.nl/~zanstra/js/kennify.js">this javascript resource</a> (<a href="view-source:http://www.xs4all.nl/~zanstra/js/kennify.js">view-source</a>).
        Thanks to <a href="http://www.q42.nl/research/">q42</a> for the bookmarklet example. I rewrote it, because it was IE-only, and I didn't need the <code>readyState</code> check anyway. 
      </p>
<p>
<span class="updated">Updated:</span> Works in Mozilla. Got an 
        <a href="javascript:&#xA;o=document.getElementsByTagName('script');&#xA;if(o.length==0) alert('Can\'t kennify; there\'s no existing script block');&#xA;else if(o[0].src.indexOf('js/kennify.js')&gt;0) kenny4all(document.body);&#xA;  else o[0].setAttribute('src','http://www.xs4all.nl/~zanstra/js/kennify.js');&#xA;void 0;">
<strong>Opera7-only version</strong>
</a> (works only when there's at
least one script-block on the page). Safari and Opera 5 and 6 don't seem to be
able to DOM-load javascript :-( Who <a href="mailto:zanstra@xs4all.nl?subject=Kennify bookmarklet for Safari/Opera">helps me out</a>? <span class="updated">Updated:</span> Marek Pawlowski mentions the "standard" kennify bookmarklet works fine from <strong>Opera version 7.5</strong>. Tested OK. Way to go Opera.
      </p>
<p>
<span class="updated">Updated:</span> again. It works again (I forgot to change an internal
        IP address to one known on the internet, sorry).
      </p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="js_multi_line_string" href="#js_multi_line_string">Multi-line strings in javascript</a>
<span class="date">
        (14 February 2003)
      </span>
</h2>
<p>
        Recently I found out how to use multi-line strings in javascript at
        <a href="http://gathering.tweakers.net/forum/list_messages/708622">GoT</a>.
        Just put a backslash before the newline (like in C):
      </p>
<pre class="JS">
var s='This is a string\
and the string continues';</pre>
<p>
And then I wondered, why didn't I notice this before. If you can work 
yourself through the 
<a href="http://www.ecma-international.org/publications/files/ecma-st/Ecma-262.pdf">ECMA-262 specification</a>
(see chapter 7.3 and 7.8.4), you find that a new-line is illegal within a string.
But then again, ECMA doesn't define a non-escape character
after a backslash. Netscape defines, if a non-escape character
is put after a backslash, you should 
<a href="http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/ident.html#1008368">ignore the backslash</a> 
(although Netscape has deprecated this usage).
Microsoft is <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jsconspecialcharacter.asp">not
even mentioning</a> what the behaviour is in these special cases.
      </p>
<p>
        So I ran some tests on browsers. See the results below. New-line means the escape
        sequence results in a newline within the string. Concat means the escape sequence
        is "eaten" by the browser.
      </p>
<table xmlns="">
<tr>
<th>Platform</th>
<th>Browser</th>
<th>Result</th>
</tr>
<tr>
<td rowspan="1">OS 9</td>
<td>Internet Explorer 5</td>
<td>concat</td>
</tr>
<tr>
<td rowspan="7">OS X 10.2.4</td>
<td>Opera 5</td>
<td>new-line</td>
</tr>
<tr>
<td>Safari 1.0 beta (v60)</td>
<td>new-line</td>
</tr>
<tr>
<td>Chimera 0.6</td>
<td>concat</td>
</tr>
<tr>
<td>Mozilla 1.0 and 1.2.1</td>
<td>concat</td>
</tr>
<tr>
<td>OmniWeb 4.1</td>
<td>concat</td>
</tr>
<tr>
<td>iCab 2.9</td>
<td>concat</td>
</tr>
<tr>
<td>Internet Explorer 5.2</td>
<td>concat</td>
</tr>
<tr>
<td rowspan="4">Windows 2000</td>
<td>Opera 7.02 Bork</td>
<td>new-line</td>
</tr>
<tr>
<td>Netscape 4.72</td>
<td>new-line</td>
</tr>
<tr>
<td>Internet Explorer 6.0</td>
<td>concat</td>
</tr>
<tr>
<td>Mozilla 1.3a</td>
<td>concat</td>
</tr>
</table>
<p>
        The good news is, no browser in this test chokes on this. The bad news
        is the behaviour is not consistent. Opera and Safari are important enough
        to keep consideration with (unless you're an IE weazer). It's funny, the
        inventors of Javascript have changed behaviour in their javascript engine.
      </p>
<p>
        An other bad thing: it's not documented anywhere. If you know more about
        this feature, please <a href="mailto:zanstra@xs4all.nl?subject=webLog:multi-line string">mail me about it</a>.
        Hmm, I like the C# way better after all.
      </p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="regexp_problem" href="#regexp_problem">Regular Expressions</a>
<span class="date">
        (23 December 2002)
      </span>
</h2>
<p>
        The global-modifier of a regular expression only works on IE/Win from
        version 5.5 and up. On IE/5.2 on Mac the support is also lacking.
      </p>
<pre class="JS">
/*This doesn't work on IE5 (it will hang, because it keeps matching 
the first match...*/
function getSites(s)
{
  var re=/(http:\/\/[^\s\"]+)/ig;
  var matches=re.exec(s);
  var result=[];
  while(matches!=null)
  {
    result[result.length]=matches[1];
    matches=re.exec(s); 
  }
  return result;
}</pre>
<p>
        The problem with this: no error is generated by the javascript-parser 
        (the global-modifier is ignored), but the behaviour is different.
      </p>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="static_objects" href="#static_objects">Static objects</a>
<span class="date">
        (19 October 2002)
      </span>
</h2>
<p>
        In javascript you can use <em>static objects</em> like the <code>Math</code>-object.
        These objects can't be instantiated themselves. Here's the trick how to do the
        same with our own objects.
      </p>
<pre class="JS">
function ClassState() 
{ 
  //Throw an error when a user tries to create this object.
  throw {number:445,description:'Object doesn\'t support this action'};
}
ClassState.global=0;
ClassState.inFunction=1;
ClassState.inEnum=2;</pre>
<div class="spacer"> </div>
<h2 class="title">
<a title="Link for future reference to this entry" name="js_hex" href="#js_hex">Hex in javascript</a>
<span class="date">
        (3 October 2002)
      </span>
</h2>
<p>
        The use of hexadecimal values in javascript is a bit hidden. Here I'll show the 
        main calls.
      </p>
<pre class="JS">
var i=0x8F8F; // hex number literal
var j=parseInt('c0c0',16); //convert hex string to a number
alert( (i+j).toString(16) ); //display the sum of i and j in hex</pre>
<div class="spacer"> </div>
</div>
<div class="footer">
<a href="mailto:zanstra@xs4all.nl?subject=webLog" title="Stuur een email">Doeke Zanstra</a>, 2002. 
          The xml-version can be downloaded <a href="jsLog.xml">as well</a>.
</div>
</td></tr></table></body>
</html>
