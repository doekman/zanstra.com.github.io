<?xml version="1.0"?>
<component>

<?component error="true" debug="false"?>

<registration
	description="httpResponse"
	progid="inTec.httpResponse"
	version="1.00"
	classid="{e7ccb942-9793-4878-80f5-040a01c7f96a}"
>
</registration>

<public>
	<property name="sVersion">
		<get/>
		<put/>
	</property>
	<property name="sStatus">
		<get/>
		<put/>
	</property>
	<property name="oHeader">
		<get/>
		<put/>
	</property>
	<property name="sBody">
		<get/>
		<put/>
	</property>
	<method name="toString">
	</method>
</public>

<script language="JScript">
<![CDATA[

var description = new httpResponse;

function httpResponse()
{
	this.get_sVersion = get_sVersion;
	this.put_sVersion = put_sVersion;
	this.get_sStatus = get_sStatus;
	this.put_sStatus = put_sStatus;
	this.get_oHeader = get_oHeader;
	this.put_oHeader = put_oHeader;
	this.get_sBody = get_sBody;
	this.put_sBody = put_sBody;

	this.toString = toString;

  sVersion='HTTP/1.1';
  sStatus='200';
  sBody='';
  oHeader=new ActiveXObject('Scripting.Dictionary');
  oHeader.Item('Server')='Doekman-lampServer/1.0';
  oHeader.Item('Date')=new Date().toUTCString();
}

var sVersion;
var sStatus;
var oHeader;
var sBody;

function get_sVersion()
{
	return sVersion;
}

function put_sVersion(newValue)
{
	sVersion = newValue;
}

function get_sStatus()
{
	return sStatus;
}

function put_sStatus(newValue)
{
	sStatus = newValue;
}

function get_oHeader()
{
	return oHeader;
}

function put_oHeader(newValue)
{
	oHeader = newValue;
}

function get_sBody()
{
	return sBody;
}

function put_sBody(newValue)
{
	sBody = newValue;
}

function toString()
{
  var sStatusPhrase, sRes;
  switch(parseInt(sStatus,10)) {
    case 100: sStatusPhrase='Continue'; break;
    case 101: sStatusPhrase='Switching Protocols'; break;
    case 200: sStatusPhrase='OK'; break;
    case 201: sStatusPhrase='Created'; break;
    case 202: sStatusPhrase='Accepted'; break;
    case 203: sStatusPhrase='Non-Authoritative Information'; break;
    case 204: sStatusPhrase='No Content'; break;
    case 205: sStatusPhrase='Reset Content'; break;
    case 206: sStatusPhrase='Partial Content'; break;
    case 300: sStatusPhrase='Multiple Choices'; break;
    case 301: sStatusPhrase='Moved Permanently'; break;
    case 302: sStatusPhrase='Found'; break;
    case 303: sStatusPhrase='See Other'; break;
    case 304: sStatusPhrase='Not Modified'; break;
    case 305: sStatusPhrase='Use Proxy'; break;
    case 307: sStatusPhrase='Temporary Redirect'; break;
    case 400: sStatusPhrase='Bad Request'; break;
    case 401: sStatusPhrase='Unauthorized'; break;
    case 402: sStatusPhrase='Payment Required'; break;
    case 403: sStatusPhrase='Forbidden'; break;
    case 404: sStatusPhrase='Not Found'; break;
    case 405: sStatusPhrase='Method Not Allowed'; break;
    case 406: sStatusPhrase='Not Acceptable'; break;
    case 407: sStatusPhrase='Proxy Authentication Required'; break;
    case 408: sStatusPhrase='Request Time-out'; break;
    case 409: sStatusPhrase='Conflict'; break;
    case 410: sStatusPhrase='Gone'; break;
    case 411: sStatusPhrase='Length Required'; break;
    case 412: sStatusPhrase='Precondition Failed'; break;
    case 413: sStatusPhrase='Request Entity Too Large'; break;
    case 414: sStatusPhrase='Request-URI Too Large'; break;
    case 415: sStatusPhrase='Unsupported Media Type'; break;
    case 416: sStatusPhrase='Requested range not satisfiable'; break;
    case 417: sStatusPhrase='Expectation Failed'; break;
    case 500: sStatusPhrase='Internal Server Error'; break;
    case 501: sStatusPhrase='Not Implemented'; break;
    case 502: sStatusPhrase='Bad Gateway'; break;
    case 503: sStatusPhrase='Service Unavailable'; break;
    case 504: sStatusPhrase='Gateway Time-out'; break;
    case 505: sStatusPhrase='HTTP Version not supported'; break;
  }
  //predetermine stuff
  if(typeof sBody!='string') sBody='';
  if(!oHeader.Exists('Content-Type')&&sBody.length>0) {
    if(sBody.indexOf('<html>')>=0) oHeader.Add('Content-Type','text/html');
    else oHeader.Add('Content-Type','text/plain');
  }
  oHeader.Item('Content-Length')=sBody.length;

  //build response text
  sRes=sVersion+' '+sStatus+' '+sStatusPhrase+'\r\n';
  var aKeys=new VBArray(oHeader.Keys()).toArray();    
  var aItems=new VBArray(oHeader.Items()).toArray();    
  for(var i=0; i<aKeys.length; i++) {
    sRes+=aKeys[i]+': '+aItems[i]+'\r\n';
  }
  if(sBody.length>0)  sRes+='\r\n'+sBody;
	return sRes;
}

]]>
</script>

</component>
